################################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: MIT-0
#  -----------------------------------------------------------------------------
# This buildspec file is provided as an example. If left unchanged, it will
# simply do nothing. An example of running a prod deploy to an EKS cluster is
# provided in the comments below. Depending on your setup, you may have multiple
# environments. In this case, we show just one staging environment. If you wish
# to add additional environments, you will need to add the corresponding stages
# and build projects to the Cloudformation template.
#
# The example is provided for reference only. It will be the responsibility of
# the end-user to provide a buildspec that will deploy the desired application,
# API, etc. to the preferred container tool in the preferred environment.
################################################################################
version: 0.2
env:
  shell: bash
phases:
  install:
    commands:
      - echo "Installing kubectl"
      - apt-get update && apt-get -y install jq python3-pip python3-dev curl
      - curl -sS -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
  build:
    commands:
      - ls -ltrh
  post_build:
    commands:
      - echo "Updating deployment with latest image..."
      - cd $CODEBUILD_SRC_DIR/config
      - pwd
      - ls -ltrh
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_SERVICE_ROLE --role-session-name codebuild-kubectl-new --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $EKS_CLUSTER_REGION
      - kubectl apply -f eks-cluster-storageclass.yaml
      - kubectl apply -f wordpress-storage-pvclaim.yaml
      - kubectl apply -f wordpress-deployment-spc.yaml
      - kubectl apply -f wordpress-deployment.yaml
      - kubectl apply -f wordpress-ingress.yaml
      - ls -ltrh
      - pwd
artifacts:
  type: zip 
  files: '**/*'